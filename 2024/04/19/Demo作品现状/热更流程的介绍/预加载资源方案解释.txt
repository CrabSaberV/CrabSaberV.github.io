
设计原因：
1. 游戏中可能存在需要大量创建一个资源实例的情况，例如：角色模板
2.Addressable主要支持的都是异步加载和实例化，但一些情况需要一帧内批量生成多个实例化对象，单靠Addressable就不可靠了。

创建思路：

项目内所有资源加载全都依靠Addressable进行。

需要预加载资源模块去申请需要预加载的资源得到一个Handle。

当要获取实例时通过Handle获取，其内部会为资源进行计数+1。
释放实例时也通过Handle释放，内部计数-1。

当模块清除或被销毁时，通过Handle将资源释放。

也就是有一个模块来管理一个资源的加载和释放流程，比较适用于需要大量创建资源实例的场景。

